name: Python Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DEFAULT_PYTHON_VERSION: "3.11"

jobs:
  quality-checks:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: make install-dev

      - name: Set up test environment
        run: |
          # Create test environment file
          cat > services/backend-service/.env.test << EOF
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL=redis://localhost:6379/0
          SECRET_KEY=test_secret_key_for_testing_only
          JWT_SECRET_KEY=test_jwt_secret_key_for_testing_only
          FLASK_ENV=testing
          TESTING=true
          OPENAI_API_KEY=test_key
          EOF

      - name: Format check with Ruff
        run: |
          uv run ruff format --check --diff .

      - name: Lint with Ruff
        run: make lint

      - name: Type check with MyPy
        run: make type-check
        continue-on-error: true

      - name: Run tests with coverage
        run: make ci-test-cov
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_testing_only
          JWT_SECRET_KEY: test_jwt_secret_key_for_testing_only
          FLASK_ENV: testing
          TESTING: true
          OPENAI_API_KEY: test_key

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./services/backend-service/coverage.xml
          directory: ./services/backend-service
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && matrix.python-version == '3.11'
        with:
          name: test-results
          path: |
            services/backend-service/pytest-results.xml
            services/backend-service/htmlcov/
            services/backend-service/coverage.xml
