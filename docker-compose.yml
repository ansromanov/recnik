services:
  # Infrastructure
  postgres:
    image: postgres:15-alpine
    container_name: recnik-db
    environment:
      POSTGRES_USER: vocab_user
      POSTGRES_PASSWORD: vocab_pass
      POSTGRES_DB: serbian_vocabulary
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - vocab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vocab_user -d serbian_vocabulary"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: recnik-redis
    ports:
      - "6379:6379"
    networks:
      - vocab-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services - Using existing backend for now, auth-service when ready
  backend:
    build: ./backend
    container_name: recnik-backend
    environment:
      DATABASE_URL: postgresql://vocab_user:vocab_pass@postgres:5432/serbian_vocabulary
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-this}
      RECAPTCHA_SITE_KEY: ${RECAPTCHA_SITE_KEY}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      UNSPLASH_ACCESS_KEY: ${UNSPLASH_ACCESS_KEY}
      PORT: 3001
      # Updated CORS origins for HTTPS
      CORS_ORIGINS: "https://localhost:3000,https://localhost:443,http://localhost:3000"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vocab-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # New Auth Service (when ready)
  auth-service:
    build: ./services/auth-service
    container_name: recnik-auth
    environment:
      DATABASE_URL: postgresql://vocab_user:vocab_pass@postgres:5432/serbian_vocabulary
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-auth-service-secret-key}
      PORT: 3002
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vocab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # New Vocabulary Service (when controllers are implemented)
  vocabulary-service:
    build: ./services/vocabulary-service
    container_name: recnik-vocabulary
    environment:
      DATABASE_URL: postgresql://vocab_user:vocab_pass@postgres:5432/serbian_vocabulary
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-vocabulary-service-secret-key}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PORT: 3003
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vocab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - microservices  # Only start when explicitly requested

  # Background Services
  cache-updater:
    build: ./backend
    container_name: recnik-cache-updater
    environment:
      DATABASE_URL: postgresql://vocab_user:vocab_pass@postgres:5432/serbian_vocabulary
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vocab-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: python cache_updater.py
    restart: unless-stopped

  image-sync-service:
    build: ./image-sync-service
    container_name: recnik-image-sync
    environment:
      REDIS_URL: redis://redis:6379
      UNSPLASH_ACCESS_KEY: ${UNSPLASH_ACCESS_KEY}
      LOG_LEVEL: INFO
      LOG_FILE: /app/logs/image-sync.log
      ENVIRONMENT: ${ENVIRONMENT:-development}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - vocab-network
    volumes:
      - image_sync_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; redis.from_url('redis://redis:6379').ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  queue-populator:
    build: ./backend
    container_name: recnik-queue-populator
    environment:
      DATABASE_URL: postgresql://vocab_user:vocab_pass@postgres:5432/serbian_vocabulary
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vocab-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: python image_queue_populator.py --continuous --interval 30
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; redis.from_url('redis://redis:6379').ping()"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend with HTTPS
  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_RESPONSIVEVOICE_API_KEY=${REACT_APP_RESPONSIVEVOICE_API_KEY}
    container_name: recnik-frontend
    environment:
      - REACT_APP_RESPONSIVEVOICE_API_KEY=${REACT_APP_RESPONSIVEVOICE_API_KEY}
    ports:
      - "3000:80"   # HTTP redirect
      - "443:443"   # HTTPS
    depends_on:
      - backend
    networks:
      - vocab-network
    volumes:
      # Mount SSL certificates
      - ./ssl:/etc/nginx/ssl:ro
      # Mount HTTPS nginx configuration
      - ./frontend/nginx-https.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: recnik-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    networks:
      - vocab-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: recnik-grafana
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - vocab-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  image_sync_logs:
  prometheus_data:
  grafana_data:

networks:
  vocab-network:
    driver: bridge
